import pandas as pd
import os

# Path to temperatures folder 
base_path = os.path.join(os.path.dirname(__file__), "temperatures")  

def load_and_combine(base_path):
    # List all CSV files in the folder
    files = [os.path.join(base_path, f) 
             for f in os.listdir(base_path) 
             if f.lower().endswith(".csv")]

    # Sort the list so it's in year order (1986 → 2005)
    files.sort()
    
    # show first few as a check

    #print("Files found:", files[:5], "...")

    # Read and combine them all
    df = pd.concat((pd.read_csv(f) for f in files), ignore_index=True)

    # pandas automatically ignores NaNs in calculations
    return df

def reshape_wide_to_long(df):
    # Reshape dataframe from Wide to Long
    df_long = df.melt(
        id_vars=["STATION_NAME", "STN_ID", "LAT", "LON"],
        value_vars=["January","February","March","April","May","June",
                    "July","August","September","October","November","December"],
        var_name="Month",
        value_name="Temperature"
    )
    print(df_long.head())
    return df_long

def compute_and_save_seasonal_average(df_long):
    # Season map 
    season_map = {}
    for m in ["December", "January", "February"]:
        season_map[m] = "Summer"
    for m in ["March", "April", "May"]:
        season_map[m] = "Autumn"
    for m in ["June", "July", "August"]:
        season_map[m] = "Winter"
    for m in ["September", "October", "November"]:
        season_map[m] = "Spring"

    df_long["Season"] = df_long["Month"].map(season_map)

    seasonal_avg = df_long.groupby("Season")["Temperature"].mean().round(1)
    # print(seasonal_avg)

    # Save seasonal averages
    avg_out = os.path.join(os.path.dirname(__file__), "average_temp.txt")
    seasonal_avg.to_csv(avg_out, sep=":", header=False)

def compute_and_save_largest_range(df_long):

    df_long.groupby("STATION_NAME")["Temperature"]

    station_stats = df_long.groupby("STATION_NAME")["Temperature"].agg(["min", "max"])

    # Calculate Range
    station_stats["range"] = station_stats["max"] - station_stats["min"]

    # Find the Station with the largest range
    max_range = station_stats["range"].max()
    largest_range_stations = station_stats[station_stats["range"] == max_range]

    # print("Station(s) with largest range:", largest_range_stations)

    # Save formatted results
    out_path = os.path.join(os.path.dirname(__file__), "largest_temp_range_station.txt")
    with open(out_path, "w") as f:
        for station, row in largest_range_stations.iterrows():
            f.write(f"{station}: Range {row['range']:.1f}°C (Max: {row['max']:.1f}°C, Min: {row['min']:.1f}°C)\n")

def compute_and_save_stability(df_long):

    # Standard deviation of each station
    station_std = df_long.groupby("STATION_NAME")["Temperature"].std()

    # Smallest and largest std (handles stations that have the same std automatically)
    smallest_std = station_std.min()
    largest_std = station_std.max()

    most_stable = station_std[station_std == smallest_std]
    most_variable = station_std[station_std == largest_std]

    # Save formatted results
    out_path = os.path.join(os.path.dirname(__file__), "temperature_stability_stations.txt")  
    with open(out_path, "w") as f:
        for station, std in most_stable.items():
            f.write(f"Most Stable: {station}: StdDev {std:.1f}°C\n")
        for station, std in most_variable.items():
            f.write(f"Most Variable: {station}: StdDev {std:.1f}°C\n")

def main():
    df = load_and_combine(base_path)
    df_long = reshape_wide_to_long(df)
    compute_and_save_seasonal_average(df_long)
    compute_and_save_largest_range(df_long)
    compute_and_save_stability(df_long)

if __name__ == "__main__":
    main()
